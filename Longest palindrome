class Solution {
public:
    string longestPalindrome(string s) {
        string longestPalindromeString ;
        string foundPalindrome = string() ;
        int longestPalindromeLength = 1 ;
        int palindromeLength = 0 ;

        longestPalindromeString = longestPalindromeExpansionMethod(s) ;
        /*for(int i = 0 ; i < s.length() ; i++){
            foundPalindrome = longestPalindrome(s, i, longestPalindromeLength) ;
            palindromeLength = foundPalindrome.length() ;
            if (palindromeLength > longestPalindromeLength){
                longestPalindromeString = foundPalindrome ;
                longestPalindromeLength = palindromeLength ;
            }
            if (longestPalindromeLength > s.length() - i ){
                break ;
            }
        }*/

        return longestPalindromeString ;
    }

    string longestPalindrome(string s, int startingPoint, int minimumLength) {
        string longestPalindromeString = string(s.substr(0,1)) ;
        string currentString ;

        if (minimumLength >= s.length()){
            return string() ;
        } 

        for (int i = s.length() - startingPoint ; i >= max(minimumLength,1) ; i--){
            currentString = s.substr(startingPoint,i) ;
            if(isPalindrome(currentString)){
                longestPalindromeString = currentString ;
                break ;
            }
        }
        return longestPalindromeString ;
    }

    string ExpandRight(string s, int startingPoint, int minimumLength){
        string newString = s.substr(startingPoint, minimumLength + 1) ; 
        if(isPalindrome(newString))
            return newString ;
        else return s.substr(startingPoint, minimumLength ) ;
    }

    string ExpandBoth(string s, int startingPoint, int minimumLength){
        if (startingPoint == 0)
            return s.substr(startingPoint, minimumLength ) ;

        string newString = s.substr(startingPoint-1, minimumLength + 2) ; 
        if(isPalindrome(newString))
            return newString ;
        else return s.substr(startingPoint, minimumLength ) ;
    }
    
    string longestPalindromeExpansionMethod(string s) {
        string longestPalindromeString = string(s.substr(0,1)) ;
        int startingPoint = 0 ; 
        int minimumLength = 1 ;
        bool foundLongerPalindrome = false ;
        if (minimumLength > s.length()){
            return string() ;
        } 

        string currentString = s.substr(startingPoint, minimumLength);
        int longestPalindromeLength = minimumLength ;
        
        do{
            do{
                currentString = ExpandRight(s, startingPoint, minimumLength) ;
                if(currentString.length() > longestPalindromeLength) {
                    longestPalindromeString = currentString ;
                    longestPalindromeLength++ ;
                    minimumLength++ ;
                    foundLongerPalindrome = true ;
                } else foundLongerPalindrome = false ;
            }while(foundLongerPalindrome == true) ;

            do{
                currentString = ExpandBoth(s, startingPoint, minimumLength) ;
                if(currentString.length() > longestPalindromeLength) {
                    longestPalindromeString = currentString ;
                    longestPalindromeLength += 2 ;
                    minimumLength += 2 ;
                    startingPoint -= 1 ;
                    foundLongerPalindrome = true ;
                } else foundLongerPalindrome = false ;
            }while(foundLongerPalindrome == true) ;
            
            startingPoint += 1 ;
        }while(startingPoint + 1 + minimumLength <= s.length()) ;
        
        return longestPalindromeString ;
    }

    bool isPalindrome(string s){
        bool isPalindrome = true ;
        int stringLength = s.length() ;
        int middlePoint = floor((stringLength-1)/2) ; 
        for(int i = 0; i <= middlePoint ; i++){
            if(s.at(i) != s.at(stringLength - i - 1)) {
                isPalindrome = false ;
                break ;
            }
        }
        return isPalindrome ;
    }
};
